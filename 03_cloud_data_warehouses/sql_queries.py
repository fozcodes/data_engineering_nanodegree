from config import get_config

config = get_config()

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs"
songplay_table_drop = "DROP TABLE IF EXISTS songplays;"
user_table_drop = "DROP TABLE IF EXISTS users;"
song_table_drop = "DROP TABLE IF EXISTS songs;"
artist_table_drop = "DROP TABLE IF EXISTS artists;"
time_table_drop = "DROP TABLE IF EXISTS times;"
valid_plan_level_drop = "DROP TABLE IF EXISTS valid_plan_levels"


# CREATE TABLES

staging_events_table_create = """
CREATE TABLE IF NOT EXISTS staging_events (
    artist VARCHAR(255),
    auth VARCHAR(255),
    firstname VARCHAR(255),
    gender VARCHAR(255),
    iteminsession integer,
    lastname VARCHAR(255),
    length VARCHAR(255),
    level VARCHAR(255),
    location VARCHAR(255),
    method VARCHAR(255),
    page VARCHAR(255),
    registration VARCHAR(255),
    sessionid INTEGER,
    song TEXT,
    status INTEGER,
    ts BIGINT,
    useragent TEXT,
    userid INTEGER
);
"""

staging_songs_table_create = """
CREATE TABLE IF NOT EXISTS staging_songs (
  num_songs INTEGER NOT NULL,
  artist_id VARCHAR(255) NOT NULL,
  artist_latitude DECIMAL(6,4),
  artist_longitude DECIMAL(7,4),
  artist_location VARCHAR(1000),
  artist_name VARCHAR(1000),
  song_id VARCHAR(255),
  title VARCHAR(1000),
  duration DECIMAL(10,5),
  year INTEGER
);
"""

valid_plan_level_create = """
CREATE TABLE IF NOT EXISTS valid_plan_levels (
    level VARCHAR(255) PRIMARY KEY
) DISTSTYLE ALL;

INSERT INTO valid_plan_levels (level) VALUES
('free'),
('paid');
"""

songplay_table_create = """
CREATE TABLE IF NOT EXISTS songplays (
    songplay_id BIGINT GENERATED BY DEFAULT AS IDENTITY(0,1),
    start_time timestamp without time zone REFERENCES times (start_time),
    user_id integer REFERENCES users (user_id),
    level VARCHAR(255) REFERENCES valid_plan_levels (level),
    song_id VARCHAR(255) REFERENCES songs (song_id),
    artist_id VARCHAR(255) REFERENCES artists (artist_id),
    session_id integer NOT NULL,
    location TEXT NOT NULL,
    user_agent TEXT NOT NULL
) DISTKEY(song_id) SORTKEY(user_id)
"""

user_table_create = """
CREATE TABLE IF NOT EXISTS users (
    user_id integer PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    gender VARCHAR(255) NOT NULL,
    level VARCHAR(255) REFERENCES valid_plan_levels (level)
) DISTSTYLE ALL;
"""

song_table_create = """
CREATE TABLE IF NOT EXISTS songs (
    song_id VARCHAR(255) PRIMARY KEY NOT NULL,
    title VARCHAR(1000) NOT NULL,
    artist_id VARCHAR(255) REFERENCES artists (artist_id),
    year integer NOT NULL ,
    duration decimal(9, 5) NOT NULL
) DISTKEY(song_id)
"""

artist_table_create = """
CREATE TABLE IF NOT EXISTS artists (
    artist_id VARCHAR(255) PRIMARY KEY NOT NULL,
    name VARCHAR(1000) NOT NULL,
    location VARCHAR(500),
    latitude decimal(4),
    longitude decimal(4)
) DISTSTYLE ALL;
"""

time_table_create = """
CREATE TABLE IF NOT EXISTS times (
    start_time timestamp without time zone PRIMARY KEY,
    hour integer NOT NULL,
    day integer NOT NULL,
    week integer NOT NULL,
    month integer NOT NULL,
    year integer NOT NULL,
    weekday integer NOT NULL,
    ts BIGINT NOT NULL
) DISTSTYLE ALL;
"""

# STAGING TABLES

staging_events_copy = """
COPY staging_events
FROM {s3_path}
iam_role '{iam_role}'
FORMAT as json 'auto ignorecase'
EMPTYASNULL;
""".format(
    **{
        "s3_path": config.get("S3", "LOG_DATA"),
        "iam_role": config.get("IAM_ROLE", "ARN"),
    }
)

staging_songs_copy = """
COPY staging_songs
FROM {s3_path}
iam_role '{iam_role}'
FORMAT as json 'auto ignorecase'
EMPTYASNULL;
""".format(
    **{
        "s3_path": config.get("S3", "SONG_DATA"),
        "iam_role": config.get("IAM_ROLE", "ARN"),
    }
)


# FINAL TABLES

songplay_table_insert = """
INSERT INTO songplays(
        start_time, user_id, level, song_id, artist_id, session_id, location, user_agent
)
SELECT
    t.start_time,
    events.userid as user_id,
    events.level,
    songs.song_id,
    songs.artist_id,
    events.sessionid as session_id,
    events.location,
    events.useragent as user_agent
FROM
    staging_events as events
INNER JOIN
    staging_songs as songs
    ON songs.artist_name = events.artist
    AND LOWER(songs.title) = LOWER(events.song)
    AND songs.duration::VARCHAR = events.length
INNER JOIN
    times as t ON t.ts = events.ts
WHERE
    events.page = 'NextSong';
"""

user_table_insert = """
INSERT INTO users
SELECT DISTINCT
    events.userid as user_id,
    events.firstname as first_name,
    events.lastname as last_name,
    events.gender,
    events.level
FROM
    staging_events as events
WHERE
    events.page = 'NextSong';
"""

song_table_insert = """
INSERT INTO songs
SELECT DISTINCT
    songs.song_id,
    songs.title,
    songs.artist_id,
    songs.year,
    songs.duration
FROM
    staging_songs as songs;
"""

artist_table_insert = """
INSERT INTO artists
WITH unique_artists AS (
  SELECT
    ss.artist_id,
    ss.artist_name,
    ss.artist_location,
    ss.artist_latitude,
    ss.artist_longitude,
   row_number() OVER (PARTITION BY ss.artist_id ORDER BY ss.artist_name ASC) AS row_number
  FROM staging_songs as ss
)
SELECT
    artist_id,
    artist_name,
    artist_location,
    artist_latitude,
    artist_longitude
FROM
    unique_artists
WHERE
    row_number = 1;
"""

time_table_insert = """
INSERT INTO times
SELECT DISTINCT
    '1970-01-01'::DATE + e.ts / 1000 * INTERVAL '1 second' as start_time,
    DATE_PART('hour', start_time) as hour,
    DATE_PART('day', start_time) as day,
    DATE_PART('week', start_time) as week,
    DATE_PART('month', start_time) as month,
    DATE_PART('year', start_time) as year,
    DATE_PART('dow', start_time) as weekday,
    e.ts
FROM
    staging_events as e
"""

# QUERY LISTS

create_staging_table_queries = [
    staging_events_table_create,
    staging_songs_table_create,
]

create_datamart_table_queries = [
    valid_plan_level_create,
    time_table_create,
    artist_table_create,
    song_table_create,
    user_table_create,
    songplay_table_create,
]
drop_staging_table_queries = [
    staging_events_table_drop,
    staging_songs_table_drop,
]
drop_datamart_table_queries = [
    songplay_table_drop,
    user_table_drop,
    song_table_drop,
    artist_table_drop,
    time_table_drop,
    valid_plan_level_drop,
]

copy_table_queries = [staging_events_copy, staging_songs_copy]

insert_table_queries = [
    time_table_insert,
    user_table_insert,
    artist_table_insert,
    song_table_insert,
    songplay_table_insert,
]
